{"ast":null,"code":"export default {\n  props: {\n    appData: Object // Passed from App.vue\n  },\n\n  computed: {\n    getFirstFavoriteCategoryLabel() {\n      const favoriteCategoryValue = this.appData.firstFavoriteCategory;\n      const favoriteCategory = this.appData.firstOptions.find(option => option.value === favoriteCategoryValue);\n      return favoriteCategory ? favoriteCategory.label : '';\n    },\n    sortedImageCounts() {\n      const counts = {};\n      this.appData.images.forEach(image => {\n        if (image.firstCategory) {\n          counts[image.firstCategory] = (counts[image.firstCategory] || 0) + 1;\n        }\n      });\n\n      // Sort the image counts from most images to least and map to include category labels\n      const sortedCounts = Object.entries(counts).sort((a, b) => b[1] - a[1]).map(([category, count]) => ({\n        categoryLabel: this.appData.firstOptions.find(option => option.value === category).label,\n        count\n      }));\n      return sortedCounts;\n    }\n  },\n  methods: {\n    copyResults() {\n      const results = `\n            Favorite Category from Exercise 2: ${this.firstFavoriteCategoryLabel}\n            Reason: ${this.appData.firstMotivation}\n\n            Favorite Image from Exercise 5: ${this.appData.favoriteImage}\n            Reason: ${this.appData.imageMotivation}\n\n            Images Assigned to Each Category in Exercise 1:\n            ${this.sortedImageCounts.map(({\n        categoryLabel,\n        count\n      }) => `${categoryLabel}: ${count} images`).join('\\n')}\n        `;\n\n      // Perform the action to copy/send the results\n      // This could be done using the Clipboard API or sending an email, for example\n      // For simplicity, let's just log the results to the console here\n      console.log(results);\n    }\n  }\n};","map":{"version":3,"names":["props","appData","Object","computed","getFirstFavoriteCategoryLabel","favoriteCategoryValue","firstFavoriteCategory","favoriteCategory","firstOptions","find","option","value","label","sortedImageCounts","counts","images","forEach","image","firstCategory","sortedCounts","entries","sort","a","b","map","category","count","categoryLabel","methods","copyResults","results","firstFavoriteCategoryLabel","firstMotivation","favoriteImage","imageMotivation","join","console","log"],"sources":["/Users/stanley/Sites/mariendael-kunstquiz/src/components/ResultScreen.vue"],"sourcesContent":["<template>\n  <div class=\"result-screen\">\n    <h2>Result Summary</h2>\n\n    <div class=\"result-item\">\n        <h3>Je favoriete categorie uit Opdracht 2:</h3>\n        <p><strong>Categorie:</strong> {{ getFirstFavoriteCategoryLabel }}</p>\n        <p><strong>Motivatie:</strong> {{ appData.firstMotivation }}</p>\n    </div>\n\n\n    <div class=\"result-item\">\n      <h3>Je favoriete afbeelding uit Opdracht 5:</h3>\n      <img :src=\"appData.favoriteImage\" :alt=\"appData.favoriteImage\" />\n      <p><strong>Reason:</strong> {{ appData.imageMotivation }}</p>\n    </div>\n\n    <div class=\"result-item\">\n        <h3>Images Assigned to Each Category in Exercise 1:</h3>\n        <ul>\n            <li v-for=\"({ categoryLabel, count }) in sortedImageCounts\" :key=\"categoryLabel\">\n            {{ categoryLabel }}: {{ count }} images\n            </li>\n        </ul>\n    </div>\n\n\n\n    <button @click=\"copyResults\">Copy Results</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    appData: Object, // Passed from App.vue\n  },\n  computed: {\n    getFirstFavoriteCategoryLabel() {\n    const favoriteCategoryValue = this.appData.firstFavoriteCategory;\n    const favoriteCategory = this.appData.firstOptions.find(option => option.value === favoriteCategoryValue);\n    return favoriteCategory ? favoriteCategory.label : '';\n  },\n  sortedImageCounts() {\n    const counts = {};\n    this.appData.images.forEach(image => {\n      if (image.firstCategory) {\n        counts[image.firstCategory] = (counts[image.firstCategory] || 0) + 1;\n      }\n    });\n\n    // Sort the image counts from most images to least and map to include category labels\n    const sortedCounts = Object.entries(counts)\n      .sort((a, b) => b[1] - a[1])\n      .map(([category, count]) => ({\n        categoryLabel: this.appData.firstOptions.find(option => option.value === category).label,\n        count,\n      }));\n\n    return sortedCounts;\n  },\n},\n\n  methods: {\n    copyResults() {\n        const results = `\n            Favorite Category from Exercise 2: ${this.firstFavoriteCategoryLabel}\n            Reason: ${this.appData.firstMotivation}\n\n            Favorite Image from Exercise 5: ${this.appData.favoriteImage}\n            Reason: ${this.appData.imageMotivation}\n\n            Images Assigned to Each Category in Exercise 1:\n            ${this.sortedImageCounts\n            .map(({ categoryLabel, count }) => `${categoryLabel}: ${count} images`)\n            .join('\\n')}\n        `;\n\n        // Perform the action to copy/send the results\n        // This could be done using the Clipboard API or sending an email, for example\n        // For simplicity, let's just log the results to the console here\n        console.log(results);\n    },\n\n  },\n};\n</script>\n\n<style scoped>\n/* Add your component-specific styling here */\n.result-screen {\n  text-align: center;\n  padding: 20px;\n}\n\n.result-item {\n  margin-bottom: 20px;\n}\n\nimg {\n  max-width: 300px;\n}\n</style>\n"],"mappings":"AAiCA,eAAe;EACbA,KAAK,EAAE;IACLC,OAAO,EAAEC,MAAM,CAAE;EACnB,CAAC;;EACDC,QAAQ,EAAE;IACRC,6BAA6BA,CAAA,EAAG;MAChC,MAAMC,qBAAoB,GAAI,IAAI,CAACJ,OAAO,CAACK,qBAAqB;MAChE,MAAMC,gBAAe,GAAI,IAAI,CAACN,OAAO,CAACO,YAAY,CAACC,IAAI,CAACC,MAAK,IAAKA,MAAM,CAACC,KAAI,KAAMN,qBAAqB,CAAC;MACzG,OAAOE,gBAAe,GAAIA,gBAAgB,CAACK,KAAI,GAAI,EAAE;IACvD,CAAC;IACDC,iBAAiBA,CAAA,EAAG;MAClB,MAAMC,MAAK,GAAI,CAAC,CAAC;MACjB,IAAI,CAACb,OAAO,CAACc,MAAM,CAACC,OAAO,CAACC,KAAI,IAAK;QACnC,IAAIA,KAAK,CAACC,aAAa,EAAE;UACvBJ,MAAM,CAACG,KAAK,CAACC,aAAa,IAAI,CAACJ,MAAM,CAACG,KAAK,CAACC,aAAa,KAAK,CAAC,IAAI,CAAC;QACtE;MACF,CAAC,CAAC;;MAEF;MACA,MAAMC,YAAW,GAAIjB,MAAM,CAACkB,OAAO,CAACN,MAAM,EACvCO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,IAAID,CAAC,CAAC,CAAC,CAAC,EAC1BE,GAAG,CAAC,CAAC,CAACC,QAAQ,EAAEC,KAAK,CAAC,MAAM;QAC3BC,aAAa,EAAE,IAAI,CAAC1B,OAAO,CAACO,YAAY,CAACC,IAAI,CAACC,MAAK,IAAKA,MAAM,CAACC,KAAI,KAAMc,QAAQ,CAAC,CAACb,KAAK;QACxFc;MACF,CAAC,CAAC,CAAC;MAEL,OAAOP,YAAY;IACrB;EACF,CAAC;EAECS,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACV,MAAMC,OAAM,GAAI;iDACyB,IAAI,CAACC,0BAA0B;sBAC1D,IAAI,CAAC9B,OAAO,CAAC+B,eAAe;;8CAEJ,IAAI,CAAC/B,OAAO,CAACgC,aAAa;sBAClD,IAAI,CAAChC,OAAO,CAACiC,eAAe;;;cAGpC,IAAI,CAACrB,iBAAgB,CACtBW,GAAG,CAAC,CAAC;QAAEG,aAAa;QAAED;MAAM,CAAC,KAAM,GAAEC,aAAc,KAAID,KAAK,SAAS,EACrES,IAAI,CAAC,IAAI,CAAC;SACd;;MAED;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAACP,OAAO,CAAC;IACxB;EAEF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}