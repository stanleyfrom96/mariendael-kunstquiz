{"ast":null,"code":"export default {\n  props: {\n    appData: Object // Passed from App.vue\n  },\n\n  computed: {\n    firstFavoriteCategoryLabel() {\n      return this.appData.firstOptions.find(option => option.value === this.appData.firstFavoriteCategory)?.label || '';\n    },\n    sortedImageCounts() {\n      const counts = {};\n      this.appData.images.forEach(image => {\n        if (image.firstCategory) {\n          counts[image.firstCategory] = (counts[image.firstCategory] || 0) + 1;\n        }\n      });\n\n      // Sort the image counts from most images to least and map to include category labels\n      const sortedCounts = Object.entries(counts).sort((a, b) => b[1] - a[1]).map(([category, count]) => ({\n        categoryLabel: this.appData.firstOptions.find(option => option.value === category).label,\n        count\n      }));\n      return sortedCounts;\n    }\n  },\n  methods: {\n    copyResults() {\n      const results = `\n        Favorite Category from Exercise 2: ${this.appData.firstFavoriteCategory}\n        Reason: ${this.appData.firstMotivation}\n\n        Favorite Image from Exercise 5: ${this.appData.favoriteImage}\n        Reason: ${this.appData.imageMotivation}\n\n        Images Assigned to Each Category in Exercise 1:\n        ${Object.keys(this.imageCounts).map(category => `${category}: ${this.imageCounts[category]} images`).join('\\n')}\n      `;\n\n      // Perform the action to copy/send the results\n      // This could be done using the Clipboard API or sending an email, for example\n      // For simplicity, let's just log the results to the console here\n      console.log(results);\n    }\n  }\n};","map":{"version":3,"names":["props","appData","Object","computed","firstFavoriteCategoryLabel","firstOptions","find","option","value","firstFavoriteCategory","label","sortedImageCounts","counts","images","forEach","image","firstCategory","sortedCounts","entries","sort","a","b","map","category","count","categoryLabel","methods","copyResults","results","firstMotivation","favoriteImage","imageMotivation","keys","imageCounts","join","console","log"],"sources":["/Users/stanley/Documents/Projecten/Archief/2023/mariendael-kunstquiz/kunstquiz/interactive-image-categorization/src/components/ResultScreen.vue"],"sourcesContent":["<template>\n  <div class=\"result-screen\">\n    <h2>Result Summary</h2>\n\n    <div class=\"result-item\">\n        <h3>Favorite Category from Exercise 2:</h3>\n        <p><strong>Category:</strong> {{ appData.firstFavoriteCategoryLabel }}</p>\n        <p><strong>Reason:</strong> {{ appData.firstMotivation }}</p>\n    </div>\n\n    <div class=\"result-item\">\n      <h3>Your Favorite Image from Exercise 5:</h3>\n      <img :src=\"appData.favoriteImage\" :alt=\"appData.favoriteImage\" />\n      <p><strong>Reason:</strong> {{ appData.imageMotivation }}</p>\n    </div>\n\n    <div class=\"result-item\">\n        <h3>Images Assigned to Each Category in Exercise 1:</h3>\n        <ul>\n            <li v-for=\"({ categoryLabel, count }) in sortedImageCounts\" :key=\"categoryLabel\">\n            {{ categoryLabel }}: {{ count }} images\n            </li>\n        </ul>\n    </div>\n\n\n\n    <button @click=\"copyResults\">Copy Results</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    appData: Object, // Passed from App.vue\n  },\n  computed: {\n    firstFavoriteCategoryLabel() {\n        return this.appData.firstOptions.find(option => option.value === this.appData.firstFavoriteCategory)?.label || '';\n    },\n  sortedImageCounts() {\n    const counts = {};\n    this.appData.images.forEach(image => {\n      if (image.firstCategory) {\n        counts[image.firstCategory] = (counts[image.firstCategory] || 0) + 1;\n      }\n    });\n\n    // Sort the image counts from most images to least and map to include category labels\n    const sortedCounts = Object.entries(counts)\n      .sort((a, b) => b[1] - a[1])\n      .map(([category, count]) => ({\n        categoryLabel: this.appData.firstOptions.find(option => option.value === category).label,\n        count,\n      }));\n\n    return sortedCounts;\n  },\n},\n\n  methods: {\n    copyResults() {\n      const results = `\n        Favorite Category from Exercise 2: ${this.appData.firstFavoriteCategory}\n        Reason: ${this.appData.firstMotivation}\n\n        Favorite Image from Exercise 5: ${this.appData.favoriteImage}\n        Reason: ${this.appData.imageMotivation}\n\n        Images Assigned to Each Category in Exercise 1:\n        ${Object.keys(this.imageCounts)\n          .map(category => `${category}: ${this.imageCounts[category]} images`)\n          .join('\\n')}\n      `;\n\n      // Perform the action to copy/send the results\n      // This could be done using the Clipboard API or sending an email, for example\n      // For simplicity, let's just log the results to the console here\n      console.log(results);\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your component-specific styling here */\n.result-screen {\n  text-align: center;\n  padding: 20px;\n}\n\n.result-item {\n  margin-bottom: 20px;\n}\n\nimg {\n  max-width: 300px;\n}\n</style>\n"],"mappings":"AAgCA,eAAe;EACbA,KAAK,EAAE;IACLC,OAAO,EAAEC,MAAM,CAAE;EACnB,CAAC;;EACDC,QAAQ,EAAE;IACRC,0BAA0BA,CAAA,EAAG;MACzB,OAAO,IAAI,CAACH,OAAO,CAACI,YAAY,CAACC,IAAI,CAACC,MAAK,IAAKA,MAAM,CAACC,KAAI,KAAM,IAAI,CAACP,OAAO,CAACQ,qBAAqB,CAAC,EAAEC,KAAI,IAAK,EAAE;IACrH,CAAC;IACHC,iBAAiBA,CAAA,EAAG;MAClB,MAAMC,MAAK,GAAI,CAAC,CAAC;MACjB,IAAI,CAACX,OAAO,CAACY,MAAM,CAACC,OAAO,CAACC,KAAI,IAAK;QACnC,IAAIA,KAAK,CAACC,aAAa,EAAE;UACvBJ,MAAM,CAACG,KAAK,CAACC,aAAa,IAAI,CAACJ,MAAM,CAACG,KAAK,CAACC,aAAa,KAAK,CAAC,IAAI,CAAC;QACtE;MACF,CAAC,CAAC;;MAEF;MACA,MAAMC,YAAW,GAAIf,MAAM,CAACgB,OAAO,CAACN,MAAM,EACvCO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,IAAID,CAAC,CAAC,CAAC,CAAC,EAC1BE,GAAG,CAAC,CAAC,CAACC,QAAQ,EAAEC,KAAK,CAAC,MAAM;QAC3BC,aAAa,EAAE,IAAI,CAACxB,OAAO,CAACI,YAAY,CAACC,IAAI,CAACC,MAAK,IAAKA,MAAM,CAACC,KAAI,KAAMe,QAAQ,CAAC,CAACb,KAAK;QACxFc;MACF,CAAC,CAAC,CAAC;MAEL,OAAOP,YAAY;IACrB;EACF,CAAC;EAECS,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,MAAMC,OAAM,GAAI;6CACuB,IAAI,CAAC3B,OAAO,CAACQ,qBAAqB;kBAC7D,IAAI,CAACR,OAAO,CAAC4B,eAAe;;0CAEJ,IAAI,CAAC5B,OAAO,CAAC6B,aAAa;kBAClD,IAAI,CAAC7B,OAAO,CAAC8B,eAAe;;;UAGpC7B,MAAM,CAAC8B,IAAI,CAAC,IAAI,CAACC,WAAW,EAC3BX,GAAG,CAACC,QAAO,IAAM,GAAEA,QAAS,KAAI,IAAI,CAACU,WAAW,CAACV,QAAQ,CAAC,SAAS,EACnEW,IAAI,CAAC,IAAI,CAAC;OACd;;MAED;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAACR,OAAO,CAAC;IACtB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}