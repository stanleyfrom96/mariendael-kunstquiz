{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"button-group\"\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.buttons, (button, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: index,\n      onClick: $event => $options.handleButtonClick(button),\n      class: _normalizeClass({\n        'radio-button': $props.radioButton,\n        'normal-button': !$props.radioButton,\n        'selected-button': $props.radioButton && $options.isSelected(button.value)\n      })\n    }, _toDisplayString(button.label), 11 /* TEXT, CLASS, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$props","buttons","button","index","key","onClick","$event","$options","handleButtonClick","_normalizeClass","radioButton","isSelected","value","label","_hoisted_2"],"sources":["/Users/stanley/Sites/mariendael-kunstquiz/src/components/ButtonGroup.vue"],"sourcesContent":["<template>\n  <div class=\"button-group\">\n    <button\n      v-for=\"(button, index) in buttons\"\n      :key=\"index\"\n      @click=\"handleButtonClick(button)\"\n      :class=\"{ 'radio-button': radioButton, 'normal-button': !radioButton, 'selected-button': radioButton && isSelected(button.value) }\"\n    >\n      {{ button.label }}\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    buttons: Array, // Array of button objects with label and value\n    radioButton: Boolean, // Flag to determine if radio button version should be used\n  },\n  data() {\n    return {\n      selectedValue: null,\n    };\n  },\n  methods: {\n    handleButtonClick(button) {\n      if (!this.radioButton) {\n        this.selectedValue = button.value; // Set the selectedValue to the button's value\n        this.$emit('button-click', button.value); // Emit the selected value\n      }\n    },\n    isSelected(value) {\n      return this.selectedValue === value;\n    },\n  },\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAc;;;uBAAzBC,mBAAA,CASM,OATNC,UASM,I,kBARJD,mBAAA,CAOSE,SAAA,QAAAC,WAAA,CANmBC,MAAA,CAAAC,OAAO,GAAzBC,MAAM,EAAEC,KAAK;yBADvBP,mBAAA,CAOS;MALNQ,GAAG,EAAED,KAAK;MACVE,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,iBAAiB,CAACN,MAAM;MAC/BP,KAAK,EAAAc,eAAA;QAAA,gBAAoBT,MAAA,CAAAU,WAAW;QAAA,kBAAoBV,MAAA,CAAAU,WAAW;QAAA,mBAAqBV,MAAA,CAAAU,WAAW,IAAIH,QAAA,CAAAI,UAAU,CAACT,MAAM,CAACU,KAAK;MAAA;wBAE5HV,MAAM,CAACW,KAAK,gCAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}